# -*- coding: utf-8 -*-
"""Introdução à Machine Learning e Classificação

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1s773aH4TRtwdHQIjbgJ5mJCvAKXP5sI4

### <font color = blue> Para o desenvolvimento desses projetos utilizaremos o pandas para explorar os dados de maneira descritiva e o seaborn para explorar de maneira visual

# <font color= green>Primeiro Projeto de Classificação
---
 Nesse primeiro projeto vamos fazer a classificação dos dados entre porco e cachorro, apenas para aprender o básico, dando início ao aprendizado

## <font color = red> Primeira Aula
---
Vimos toda a primeira parte de criação e treinamento de um modelo, além de testar a porcentagem de acertos dele.
"""

# Features: pelo longo, perna curta e faz "au au". (1 == sim, 0 == não)

porco1 = [0, 1, 0]
porco2 = [0, 1, 1]
porco3 = [1, 1, 0]

cachorro1 = [0, 1, 1]
cachorro2 = [1, 0, 1]
cachorro3 = [1, 1, 1]

# 1 => porco, 0 => cachorro
treino_x = [porco1, porco2, porco3, cachorro1, cachorro2, cachorro3]
treino_y = [1,1,1,0,0,0] #label / etiqueta

from sklearn.svm import LinearSVC

model = LinearSVC()
model.fit(treino_x, treino_y)

animal_misterioso = [1,1,1]
model.predict([animal_misterioso])

misterio1 = [1,1,1]
misterio2 = [1,1,0]
misterio3 = [0,1,1]

teste_x = [misterio1, misterio2, misterio3]
teste_y = [0,1,1]

previsoes = model.predict(teste_x)
previsoes

corretos = (previsoes == teste_y).sum()
total = len(teste_x)
taxa_de_acerto = corretos/total
print("A taxa de acertos é:",taxa_de_acerto * 100)

from sklearn.metrics import accuracy_score

taxa_de_acerto = accuracy_score(teste_y, previsoes)
print("Taxa de acerto de:", taxa_de_acerto * 100)

"""# <font color = green> Segundo Projeto de Classificação
---
Nesse projeto vamos pegar os dados de uma URL
"""

import pandas as pd

dados = pd.read_csv("https://gist.githubusercontent.com/guilhermesilveira/2d2efa37d66b6c84a722ea627a897ced/raw/10968b997d885cbded1c92938c7a9912ba41c615/tracking.csv")
dados.head()

mapa = {
    "home" : "principal",
    "how_it_works" : "como_funciona",
    "contact" : "contato",
    "bought" : "comprou"
}
dados.rename(columns = mapa, inplace = True)
dados.head()

dados.shape

x = dados[["principal", "como_funciona", "contato"]]
y = dados["comprou"]

treino_x = x[:75]
treino_y = y[:75]

teste_x = x[75:]
teste_y = y[75:]

print(f'Treinaremos com {len(treino_x)} elementos e testaremos com {len(teste_x)} elementos')

from sklearn.svm import LinearSVC

model = LinearSVC()
model.fit(treino_x, treino_y)

from sklearn.metrics import accuracy_score

previsoes = model.predict(teste_x)
acuracia = accuracy_score(teste_y, previsoes)
print(f'A acurácia desse modelo é de: {acuracia*100:.2f}%')

"""## Utilizando a biblioteca para separar treino e teste"""

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y, random_state = SEED, test_size = 0.25)
print(f'Treinaremos com {len(treino_x)} elementos e testaremos com {len(teste_x)} elementos')

model = LinearSVC()
model.fit(treino_x, treino_y)
previsoes = model.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes)
print(f'A acurácia desse modelo é de: {acuracia*100:.2f}%')

# proporção de ~2:1
treino_y.value_counts()

# proporção de ~3:1
teste_y.value_counts()

"""### Colocando proporcionalidade na separação com stratify a partir da classificação"""

from sklearn.model_selection import train_test_split
from sklearn.svm import LinearSVC
from sklearn.metrics import accuracy_score

SEED = 20

treino_x, teste_x, treino_y, teste_y = train_test_split(x, y,
                                                        random_state = SEED, 
                                                        stratify = y, 
                                                        test_size = 0.25)
print(f'Treinaremos com {len(treino_x)} elementos e testaremos com {len(teste_x)} elementos')

model = LinearSVC()
model.fit(treino_x, treino_y)
previsoes = model.predict(teste_x)

acuracia = accuracy_score(teste_y, previsoes)
print(f'A acurácia desse modelo é de: {acuracia*100:.2f}%')

# proporção de ~2:1
treino_y.value_counts()

# proporção de ~2:1
teste_y.value_counts()

